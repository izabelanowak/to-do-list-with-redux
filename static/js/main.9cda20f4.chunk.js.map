{"version":3,"sources":["GlobalStyle.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","id","done","removeTask","splice","setAllDone","actions","selectTasks","StyledForm","styled","form","theme","breakpoints","mobile","Input","input","colors","accentColor","Button","button","primaryColor","textColor","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","focusInput","current","focus","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","autoFocus","ref","value","placeholder","onChange","target","onClick","List","ul","Item","li","hidden","css","Content","span","toggleDone","green","remove","red","TaskList","useSelector","map","task","Wrapper","div","disabledColor","Buttons","length","disabled","every","section","backgroundColor","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","Container","main","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.9cda20f4.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    box-sizing: border-box;\r\n    }\r\n\r\n    *,\r\n    ::after,\r\n    ::before {\r\n    box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n    background-color: #eee;\r\n    font-family: 'Montserrat', sans-serif;\r\n    }\r\n`;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: (state) => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone, removeTask,setAllDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.colors.accentColor};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.colors.primaryColor};\r\n    color: ${({ theme }) => theme.colors.textColor};\r\n    border: none;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedNewTaskContent,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                autoFocus\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button onClick={focusInput}>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.accentColor};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    overflow-wrap: anywhere;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 0;\r\n    width: 30px;\r\n    height: 30px;\r\n    color: ${({ theme }) => theme.colors.textColor};\r\n    border: none;\r\n    cursor: pointer;\r\n    transition: background 0.3s;\r\n    \r\n    &:hover {\r\n       filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.colors.green};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.colors.red};\r\n    `}\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item key={task.id} hidden={task.done && hideDone}>\r\n                    <Button toggleDone onClick={() => dispatch(toggleTaskDone(task.id))}>\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        {task.content}\r\n                    </Content>\r\n                    <Button remove onClick={() => dispatch(removeTask(task.id))}>\r\n                        &#128465;\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background: transparent;\r\n    color: ${({ theme }) => theme.colors.primaryColor};\r\n    border: none;\r\n    cursor: pointer;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:disabled { \r\n        filter: none;\r\n        color: ${({ theme }) => theme.colors.disabledColor};\r\n        cursor: not-allowed;\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\nimport { Wrapper, Button } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                        onClick={() => dispatch(setAllDone())}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Buttons;\r\n\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.colors.backgroundColor};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.colors.accentColor};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.accentColor};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import { Wrapper, Header, Title, Body } from \"./styled\"\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nconst Container = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport default Container;","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\n\nfunction Tasks() {\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={<TaskList/>}\n        extraHeaderContent={<Buttons/>}\n      />\n    </Container>\n  );\n}\n\nexport default Tasks;\n","import Tasks from \"./features/tasks/Tasks\"\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from 'react-redux';\nimport { GlobalStyle } from './GlobalStyle';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n","export const theme = {\r\n    colors: {\r\n        primaryColor: \"teal\",\r\n        disabledColor: \"#ccc\",\r\n        accentColor: \"#ddd\",\r\n        backgroundColor: \"white\",\r\n        textColor: \"white\",\r\n        green: \"hsl(120, 61%, 34%)\",\r\n        red: \"hsl(348, 83%, 47%)\",\r\n    },\r\n    breakpoints: {\r\n        mobile: 767,\r\n    }\r\n};"],"sourceRoot":""}