{"version":3,"sources":["GlobalStyle.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/index.js","features/author/AuthorPage/styled.js","features/author/AuthorPage/index.js","features/tasks/Input/index.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Button/index.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/ExampleTasks/styled.js","features/tasks/TasksPage/ExampleTasks/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","styled.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","Wrapper","styled","section","theme","colors","backgroundColor","accentColor","Header","header","breakpoints","mobile","Title","h2","Body","div","Section","title","body","extraHeaderContent","Container","main","Paragraph","p","Link","a","primaryColor","AuthorPage","href","Input","input","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","removeAllTasks","setAllDone","setAllUnDone","fetchExampleTasks","setTasks","actions","selectTaskState","selectTasks","selectHideDone","selectLoading","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","selectIsEveryTaskUnDone","StyledForm","form","Button","button","textColor","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","focusInput","current","focus","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","autoFocus","ref","value","placeholder","onChange","target","onClick","searchQueryParamName","List","ul","Item","li","hidden","css","Content","span","toggleDone","green","remove","red","StyledLink","TaskList","location","useLocation","query","URLSearchParams","search","get","useSelector","filter","toUpperCase","includes","selectTaskByQuery","map","to","disabledColor","Buttons","areTasksEmpty","isEveryTaskDone","isEveryTaskUnDone","disabled","Search","useQueryParameter","replaceQueryParameter","history","useHistory","key","searchParams","undefined","delete","set","pathname","toString","useReplaceQueryParameter","ExampleTasks","TasksPage","TaskPage","useParams","find","getTaskById","activeClassName","StyledNav","nav","StyledNavLink","NavLink","attrs","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","call","exampleTasks","delay","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56967183.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    box-sizing: border-box;\r\n    }\r\n\r\n    *,\r\n    ::after,\r\n    ::before {\r\n    box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n    background-color: #eee;\r\n    font-family: 'Montserrat', sans-serif;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.colors.backgroundColor};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.colors.accentColor};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.accentColor};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import { Wrapper, Header, Title, Body } from \"./styled\"\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nconst Container = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Paragraph = styled.p`\r\n    line-height: 1.5;\r\n`;\r\n\r\nexport const Link = styled.a`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.colors.primaryColor};\r\n`;","import Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { Paragraph, Link } from \"./styled\";\r\n\r\nfunction AuthorPage() {\r\n  return (\r\n    <Container>\r\n      <Header title=\"O autorze\" />\r\n      <Section\r\n        title=\"Witaj, nazywam się Izabela!\"\r\n        body={\r\n          <>\r\n            <Paragraph>\r\n              Mam umysł ścisły i lubię świat techniki 📐.\r\n              Kierując się tym ukończyłam studia na kierunku <strong>Automatyka i Robotyka</strong> 🤖.\r\n            </Paragraph>\r\n            <Paragraph>\r\n              Lubię tworzyć \"coś z niczego\", dlatego programowanie daje mi dużo frajdy i satysfakcji 😎.\r\n              Uwielbiam programować <strong>strony i aplikacje internetowe</strong>. Lubie nowe wyzwania 🙂.\r\n            </Paragraph>\r\n            <Paragraph>\r\n              W czasie wolnym lubię spędzać czas na tworzeniu <strong>maskotek z włóczki</strong> 🧶. Prace wykonuje na szydełku.\r\n              Sprawia mi to wiele radości, kiedy ze zwykłego motka włóczki powstaje maskotka 🧸, która może sprawić dużo radości jakiemuś dziecku.\r\n            </Paragraph>\r\n            <Paragraph>\r\n              Chcesz zobaczyć więcej moich projektów?\r\n              Zajrzyj na moją stronę na <Link href=\"https://github.com/izabelanowak\">Github</Link>!\r\n            </Paragraph>\r\n          </>\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default AuthorPage;\r\n","import styled from \"styled-components\";\r\n\r\nconst Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.colors.accentColor};\r\n`;\r\n\r\nexport default Input;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        loading: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: (state) => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        removeAllTasks: ({ tasks }) => {\r\n            tasks.splice(0);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        setAllUnDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = false;\r\n            }\r\n        },\r\n        fetchExampleTasks: (state) => {\r\n            state.loading = true;\r\n        },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n            state.loading = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    removeAllTasks,\r\n    setAllDone,\r\n    setAllUnDone,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTaskState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTaskState(state).tasks;\r\nexport const selectHideDone = state => selectTaskState(state).hideDone;\r\nexport const selectLoading = state => selectTaskState(state).loading;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\nexport const selectIsEveryTaskUnDone = state => selectTasks(state).every(({ done }) => !done);\r\n\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTaskByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n\r\n    return tasks.filter(({ content }) =>\r\n        content.toUpperCase().includes(query.trim().toUpperCase()));\r\n};\r\n\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.colors.primaryColor};\r\n    color: ${({ theme }) => theme.colors.textColor};\r\n    border: none;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Input from \"../../Input\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { StyledForm, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedNewTaskContent,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                autoFocus\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button onClick={focusInput}>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;\r\n","\r\nconst searchQueryParamName = \"szukaj\";\r\n\r\nexport default searchQueryParamName;","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.accentColor};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    overflow-wrap: anywhere;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 0;\r\n    width: 30px;\r\n    height: 30px;\r\n    color: ${({ theme }) => theme.colors.textColor};\r\n    border: none;\r\n    cursor: pointer;\r\n    transition: background 0.3s;\r\n    \r\n    &:hover {\r\n       filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.colors.green};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.colors.red};\r\n    `}\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.colors.primaryColor};\r\n    transition: color 0.3s;\r\n    \r\n    &:hover {\r\n       filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTaskByQuery } from \"../../tasksSlice\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { List, Item, Content, Button, StyledLink } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n    const location = useLocation();\r\n    const query = (new URLSearchParams(location.search)).get(searchQueryParamName);\r\n\r\n    const tasks = useSelector(state => selectTaskByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item key={task.id} hidden={task.done && hideDone}>\r\n                    <Button toggleDone onClick={() => dispatch(toggleTaskDone(task.id))}>\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        <StyledLink to={`/zadania/${task.id}`}>{task.content}</StyledLink>\r\n                    </Content>\r\n                    <Button remove onClick={() => dispatch(removeTask(task.id))}>\r\n                        &#128465;\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;","import styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n    background: transparent;\r\n    font-size: 14px;\r\n    color: ${({ theme }) => theme.colors.primaryColor};\r\n    border: none;\r\n    cursor: pointer;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:disabled { \r\n        filter: none;\r\n        color: ${({ theme }) => theme.colors.disabledColor};\r\n        cursor: not-allowed;\r\n    }\r\n`;\r\n\r\nexport default Button;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { Wrapper } from \"./styled\";\r\nimport Button from \"../Button\";\r\n\r\nimport {\r\n    toggleHideDone,\r\n    setAllDone,\r\n    setAllUnDone,\r\n    removeAllTasks,\r\n    selectAreTasksEmpty,\r\n    selectIsEveryTaskDone,\r\n    selectIsEveryTaskUnDone,\r\n    selectHideDone,\r\n} from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const isEveryTaskUnDone = useSelector(selectIsEveryTaskUnDone);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            {!areTasksEmpty && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        disabled={isEveryTaskUnDone}\r\n                        onClick={() => dispatch(setAllUnDone())}\r\n                    >\r\n                        Odznacz wszystkie\r\n                    </Button>\r\n                    <Button\r\n                        disabled={isEveryTaskDone}\r\n                        onClick={() => dispatch(setAllDone())}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                    <Button\r\n                        disabled={areTasksEmpty}\r\n                        onClick={() => dispatch(removeAllTasks())}\r\n                    >\r\n                        Usuń wszystkie\r\n                    </Button>\r\n                </>\r\n            )\r\n            }\r\n        </Wrapper >\r\n    )\r\n};\r\n\r\nexport default Buttons;\r\n\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;","import Input from \"../../Input\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Search = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : undefined,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filtruj zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    )\r\n};\r\nexport default Search;","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = (searchQueryParamName) => {\r\n    const location = useLocation();\r\n\r\n    return (new URLSearchParams(location.search)).get(searchQueryParamName);\r\n};\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    return ({ key, value }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value === undefined) {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value);\r\n        }\r\n\r\n        history.push(`${location.pathname}?${searchParams.toString()}`);\r\n    };\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Wrapper } from \"./styled\";\r\nimport Button from \"../Button\";\r\nimport { fetchExampleTasks, selectLoading } from \"../../tasksSlice\";\r\n\r\nconst ExampleTasks = () => {\r\n    const loading = useSelector(selectLoading);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Button\r\n                onClick={() => dispatch(fetchExampleTasks())}\r\n                disabled={loading}\r\n            >\r\n                {loading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n            </Button>\r\n        </Wrapper >\r\n    )\r\n};\r\n\r\nexport default ExampleTasks;\r\n\r\n\r\n","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Search from \"./Search\";\nimport ExampleTasks from \"./ExampleTasks\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\n\nfunction TasksPage() {\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n        extraHeaderContent={<ExampleTasks />}\n      />\n      <Section\n        title=\"Wyszukiwarka\"\n        body={<Search />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={<TaskList />}\n        extraHeaderContent={<Buttons />}\n      />\n    </Container>\n  );\n}\n\nexport default TasksPage;\n","import { useParams } from \"react-router-dom\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\nfunction TaskPage() {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n\r\n    return (\r\n        <Container>\r\n            <Header title=\"Szczegóły zadania\" />\r\n            <Section\r\n                title={task ? task.content : \"Nie ma takiego zadania!\"}\r\n                body={\r\n                    task && (\r\n                        <>\r\n                            <strong>Ukończono: </strong>\r\n                            {task.done ? \"Tak\" : \"Nie\"}\r\n                        </>\r\n                    )\r\n                }\r\n            />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TaskPage;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNav = styled.nav`\r\n    background-color: ${({ theme }) => theme.colors.primaryColor};\r\n`;\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    display: flex;\r\n    margin: 0 auto;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    padding: 20px;\r\n`;\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.colors.textColor};\r\n\r\n    &.${activeClassName}{\r\n        font-weight: bold;\r\n    }\r\n`;","import { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport { Item, List, StyledNav, StyledNavLink } from \"./styled\";\r\n\r\nconst App = () => (\r\n    <HashRouter>\r\n        <StyledNav>\r\n            <List>\r\n                <Item>\r\n                    <StyledNavLink to=\"/zadania\">Zadania</StyledNavLink>\r\n                </Item>\r\n                <Item>\r\n                    <StyledNavLink to=\"/autor\">O autorze</StyledNavLink>\r\n                </Item>\r\n            </List>\r\n        </StyledNav>\r\n        <Switch>\r\n            <Route path=\"/zadania/:id\">\r\n                <TaskPage />\r\n            </Route>\r\n            <Route path=\"/zadania\">\r\n                <TasksPage />\r\n            </Route>\r\n            <Route path=\"/autor\">\r\n                <AuthorPage />\r\n            </Route>\r\n            <Route path=\"/\">\r\n                <Redirect to=\"/zadania\" />\r\n            </Route>\r\n        </Switch>\r\n    </HashRouter>\r\n);\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/to-do-list-with-redux/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n    return await response.json();\r\n};","import { takeEvery, call, put, takeLatest, select, delay } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { fetchExampleTasks, selectTasks, setTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield delay(500);\r\n        yield put(setTasks(exampleTasks));\r\n    }\r\n    catch (error) {\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n};\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from './rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from 'react-redux';\nimport { GlobalStyle } from './GlobalStyle';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n","export const theme = {\r\n    colors: {\r\n        primaryColor: \"teal\",\r\n        disabledColor: \"#ccc\",\r\n        accentColor: \"#ddd\",\r\n        backgroundColor: \"white\",\r\n        textColor: \"white\",\r\n        green: \"hsl(120, 61%, 34%)\",\r\n        red: \"hsl(348, 83%, 47%)\",\r\n    },\r\n    breakpoints: {\r\n        mobile: 767,\r\n    }\r\n};"],"sourceRoot":""}